/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.as.rest.api;

import com.as.rest.dto.SubscriptionResponseDto;
import com.as.rest.dto.UserRequestDto;
import com.as.rest.dto.UserResponseDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-11-03T13:34:06.389+01:00")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    UsersApiDelegate getDelegate();

    @ApiOperation(value = "Create new user", nickname = "createUser", notes = "", response = UserResponseDto.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "New user was created", response = UserResponseDto.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/users",
        method = RequestMethod.POST)
    default ResponseEntity<UserResponseDto> createUser(@ApiParam(value = "User object that needs to be added to the store" ,required=true )  @Valid @RequestBody UserRequestDto body) {
        return getDelegate().createUser(body);
    }


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "", response = UserResponseDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserResponseDto.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<UserResponseDto> deleteUser(@ApiParam(value = "ID of user to return",required=true) @PathVariable("id") Long id) {
        return getDelegate().deleteUser(id);
    }


    @ApiOperation(value = "Get all users", nickname = "getAllUsers", notes = "", response = UserResponseDto.class, responseContainer = "List", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserResponseDto.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UserResponseDto>> getAllUsers() {
        return getDelegate().getAllUsers();
    }


    @ApiOperation(value = "Get user by id", nickname = "getUser", notes = "", response = UserResponseDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserResponseDto.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.GET)
    default ResponseEntity<UserResponseDto> getUser(@ApiParam(value = "ID of user to return",required=true) @PathVariable("id") Long id) {
        return getDelegate().getUser(id);
    }


    @ApiOperation(value = "Get all subscriptions for user", nickname = "getUserSubscriptions", notes = "", response = SubscriptionResponseDto.class, responseContainer = "List", tags={ "subscriptions","users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubscriptionResponseDto.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/users/{id}/subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<SubscriptionResponseDto>> getUserSubscriptions(@ApiParam(value = "ID of user to return",required=true) @PathVariable("id") Long id) {
        return getDelegate().getUserSubscriptions(id);
    }


    @ApiOperation(value = "Update user", nickname = "updateUser", notes = "", response = UserResponseDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserResponseDto.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.PUT)
    default ResponseEntity<UserResponseDto> updateUser(@ApiParam(value = "ID of user to return",required=true) @PathVariable("id") Long id,@ApiParam(value = "User object that needs to be added to the store" ,required=true )  @Valid @RequestBody UserRequestDto body) {
        return getDelegate().updateUser(id, body);
    }

}
