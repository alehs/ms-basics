/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.as.rest.api;

import com.as.rest.dto.SubscriptionRequestDto;
import com.as.rest.dto.SubscriptionResponseDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-11-03T13:34:06.389+01:00")

@Api(value = "subscriptions", description = "the subscriptions API")
public interface SubscriptionsApi {

    SubscriptionsApiDelegate getDelegate();

    @ApiOperation(value = "Create new subscription", nickname = "createSubscription", notes = "", response = SubscriptionResponseDto.class, tags={ "subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "New subscription was created", response = SubscriptionResponseDto.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/subscriptions",
        method = RequestMethod.POST)
    default ResponseEntity<SubscriptionResponseDto> createSubscription(@ApiParam(value = "Subscription object that needs to be added to the store"  )  @Valid @RequestBody SubscriptionRequestDto body) {
        return getDelegate().createSubscription(body);
    }


    @ApiOperation(value = "Get all subscriptions", nickname = "getAllSubscriptions", notes = "", response = SubscriptionResponseDto.class, responseContainer = "List", tags={ "subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubscriptionResponseDto.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/subscriptions",
        method = RequestMethod.GET)
    default ResponseEntity<List<SubscriptionResponseDto>> getAllSubscriptions() {
        return getDelegate().getAllSubscriptions();
    }


    @ApiOperation(value = "Get subscription by id", nickname = "getSubscription", notes = "", response = SubscriptionResponseDto.class, tags={ "subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubscriptionResponseDto.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Subscription not found") })
    @RequestMapping(value = "/subscriptions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SubscriptionResponseDto> getSubscription(@ApiParam(value = "ID of subscription to return",required=true) @PathVariable("id") Long id) {
        return getDelegate().getSubscription(id);
    }


    @ApiOperation(value = "Update subscription", nickname = "updateSubscription", notes = "", response = SubscriptionResponseDto.class, tags={ "subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubscriptionResponseDto.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Subscription not found") })
    @RequestMapping(value = "/subscriptions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<SubscriptionResponseDto> updateSubscription(@ApiParam(value = "ID of subscription to return",required=true) @PathVariable("id") Long id,@ApiParam(value = "Subscription object that needs to be added to the store" ,required=true )  @Valid @RequestBody SubscriptionRequestDto body) {
        return getDelegate().updateSubscription(id, body);
    }

}
